package com.epam.test.automation.java.practice3;

public class Main {
    private  Main() { }

    /**
     * In a given array of integers nums swap values of the first and the last array elements, the second and the penultimate etc., if the two exchanged values are even.
     * Example:
     * {10, 5, 3, 4} =>  {4, 5, 3, 10}
     * {100, 2, 3, 4, 5} => {100, 4, 3, 2, 5}
     * {100, 2, 3, 45, 33, 8, 4, 54} => {54, 4, 3, 45, 33, 8, 2, 100}
     */
    public static int[] task1(int[] array) {
        if (array == null)
            throw new IllegalArgumentException();
        int lastIndex = array.length - 1;
        for (int i = 0; i < array.length - i; i++) {
            if (array[i] != array[lastIndex - i] &&
                    array[i] % 2 == 0 &&
                    array[lastIndex - i] % 2 == 0) {
                int a = array[i];
                array[i] = array[lastIndex - i];
                array[lastIndex - i] = a;
            }
        }
        return array;
    }

    /**
     * In a given array of integers nums calculate integer result value, that is equal to the distance between the first and the last entry of the maximum value in the array.
     * Example:
     * {4, 100, 3, 4} result = 0
     * {5, 50, 50, 4, 5} result = 1
     * {5, 350, 350, 4, 350} result = 3
     * {10, 10, 10, 10, 10} result = 4
     */
    public static int task2(int[] array) {
        if (array == null)
            throw new IllegalArgumentException();
        int max = array[0];
        int index = 0;
        int index2 = 0;
        for (int i = 1; i < array.length; i++) {
            if (max < array[i]) {
                max = array[i];
                index = index2 = i;
            } else if (max == array[i])
                index2 = i;
        }
        return index2 - index;
    }

    /**
     * In a predetermined two-dimensional integer array (square matrix) matrix insert 0 into elements to the left side of the main diagonal, and 1 into elements to the right side of the diagonal.
     * Example:
     * {{2, 4, 3, 3},  {5, 7, 8, 5},  {2, 4, 3, 3},  {5, 7, 8, 5}}   =>   {{2, 1, 1, 1},  {0, 7, 1, 1},  {0, 0, 3, 1},  {0, 0, 0, 5}}
     */
    public static int[][] task3(int[][] matrix) {
        if (matrix == null)
            throw new IllegalArgumentException();
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                if (i > j)
                    matrix[i][j] = 0;
                else if (i < j)
                    matrix[i][j] = 1;
            }
        }
        return matrix;
    }
}
